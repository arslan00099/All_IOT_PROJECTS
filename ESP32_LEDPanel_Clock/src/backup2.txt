// https://api.coingecko.com/api/v3/coins/list
#include <Arduino.h>
#include "WiFi.h"
#include <ArduinoJson.h>
#include <HTTPClient.h>
#include "ledPanel.h"
#include "config.h"
unsigned long prevMillisCoin = 0;
unsigned long prevMilliConfig = 0;

String coinAPI;

double bitcoin_eur;            // 9473.3
double bitcoin_eur_24h_change; // 11.379516678954898
double bitcoin_gbp;            // 8642.89
double bitcoin_gbp_24h_change; // 11.58637677393075
double bitcoin_usd;            // 11140.6
double bitcoin_usd_24h_change; // 12.464050392648252

double ethereum_eur;            // 276.02
double ethereum_eur_24h_change; // 3.5689620753981264
double ethereum_gbp;            // 251.82
double ethereum_gbp_24h_change; // 3.7613159836416026
double ethereum_usd;            // 324.6
double ethereum_usd_24h_change; // 4.577442219792744

const unsigned short euro[] PROGMEM = {
    0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0xD800, 0xC000, 0xF000, 0x2000, 0x0000, 0x5800, 0xA800, 0x0000, // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0xE800, 0xB800, 0xA000, 0x0000, 0x0000, 0x0000, 0xE800, 0xB800, 0xA000, 0x0000, 0x0000, 0x0000, 0x6800, // 0x0020 (32) pixels
    0xA000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE000, 0xC000, 0xE800, 0x2800, 0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0000, // 0x0030 (48) pixels
};

const unsigned short eth[] PROGMEM = {
    0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x0003, 0x0003, 0x0001, 0x0000, 0x0000, 0x0000, // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0021, 0x0021, 0x0041, 0x1187, 0x328F, 0x0005, // 0x0020 (32) pixels
    0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0022, // 0x0030 (48) pixels
    0x0064, 0x5CF9, 0x2315, 0x00CB, 0x0004, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0040 (64) pixels
    0x0000, 0x0000, 0x0000, 0x0063, 0x1311, 0x4D7E, 0x0AF8, 0x1A96, 0x0006, 0x0002, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0050 (80) pixels
    0x0020, 0x0000, 0x0000, 0x0000, 0x0021, 0x0000, 0x0001, 0x00A6, 0x457B, 0x2D5F, 0x02FA, 0x1298, 0x094D, 0x0025, 0x0002, 0x0000, // 0x0060 (96) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0021, 0x0064, 0x3C35, 0x2D5C, 0x257F, 0x02DB, 0x12DB, // 0x0070 (112) pixels
    0x2296, 0x0007, 0x0003, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0042, 0x01EC, 0x3D5C, // 0x0080 (128) pixels
    0x1D3D, 0x253F, 0x02FC, 0x027B, 0x12BB, 0x1234, 0x0005, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0090 (144) pixels
    0x0000, 0x0064, 0x451B, 0x253E, 0x1D5F, 0x253F, 0x02FC, 0x02BD, 0x027C, 0x1AFA, 0x00AA, 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, // 0x00A0 (160) pixels
    0x0000, 0x0000, 0x0000, 0x0001, 0x0023, 0x2311, 0x3D5D, 0x1D1E, 0x1D3F, 0x251F, 0x02FD, 0x029D, 0x029D, 0x0ADB, 0x22B5, 0x0026, // 0x00B0 (176) pixels
    0x0001, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0043, 0x00C7, 0x4D3C, 0x251D, 0x1D3F, 0x151F, 0x2D5F, 0x02FC, 0x029D, // 0x00C0 (192) pixels
    0x02BD, 0x029B, 0x12B9, 0x0190, 0x0023, 0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0001, 0x0044, 0x34B9, 0x257E, 0x153E, 0x1D5F, // 0x00D0 (208) pixels
    0x1D5F, 0x2D3F, 0x02FC, 0x029D, 0x029C, 0x029C, 0x0A9C, 0x1AB9, 0x0068, 0x0022, 0x0000, 0x0021, 0x0000, 0x0001, 0x0042, 0x022D, // 0x00E0 (224) pixels
    0x353D, 0x153F, 0x153F, 0x1D5F, 0x2D5F, 0x2CDF, 0x029B, 0x12BD, 0x0A7C, 0x027C, 0x0A9D, 0x129B, 0x1A12, 0x0025, 0x0001, 0x0000, // 0x00F0 (240) pixels
    0x0000, 0x0022, 0x0065, 0x4D1B, 0x2D1E, 0x255F, 0x255F, 0x14BF, 0x039C, 0x02BA, 0x0177, 0x01B9, 0x0A3A, 0x12BC, 0x0A7C, 0x0A7B, // 0x0100 (256) pixels
    0x22B9, 0x00ED, 0x0022, 0x0020, 0x0001, 0x0023, 0x2374, 0x455F, 0x34FF, 0x0C1E, 0x035B, 0x02B9, 0x029A, 0x0ABC, 0x0198, 0x0157, // 0x0110 (272) pixels
    0x0177, 0x0197, 0x021A, 0x127C, 0x1A9C, 0x2277, 0x0025, 0x0020, 0x0022, 0x016A, 0x551E, 0x137B, 0x0259, 0x029B, 0x029B, 0x02BB, // 0x0120 (288) pixels
    0x029B, 0x0ABC, 0x01B8, 0x0177, 0x01B7, 0x0197, 0x0157, 0x0178, 0x01B9, 0x1A78, 0x21CF, 0x0005, 0x0022, 0x19EC, 0x1294, 0x0A98, // 0x0130 (304) pixels
    0x0A9B, 0x027C, 0x029C, 0x029B, 0x027C, 0x0A9C, 0x0198, 0x0197, 0x0197, 0x0197, 0x0198, 0x0197, 0x0196, 0x0193, 0x198E, 0x0005, // 0x0140 (320) pixels
    0x0001, 0x0022, 0x0067, 0x1A32, 0x1AB9, 0x0A7B, 0x029C, 0x02BC, 0x029C, 0x0A9C, 0x0178, 0x0177, 0x0197, 0x0176, 0x0197, 0x0995, // 0x0150 (336) pixels
    0x11B1, 0x00A9, 0x0004, 0x0002, 0x0000, 0x2166, 0x0024, 0x0027, 0x010F, 0x1AB8, 0x0A99, 0x029A, 0x02BC, 0x0A9C, 0x0178, 0x0136, // 0x0160 (352) pixels
    0x0196, 0x0195, 0x0994, 0x0950, 0x0008, 0x0026, 0x10E6, 0x0001, 0x0020, 0x0022, 0x5C96, 0x016A, 0x0026, 0x0027, 0x11F0, 0x1AD7, // 0x0170 (368) pixels
    0x02BA, 0x029B, 0x0198, 0x0997, 0x0974, 0x1150, 0x0068, 0x0006, 0x002A, 0x2A11, 0x08C7, 0x0002, 0x0000, 0x0021, 0x0147, 0x6D9A, // 0x0180 (384) pixels
    0x3371, 0x0046, 0x0046, 0x00CB, 0x12B6, 0x1AB8, 0x09D5, 0x1193, 0x00CF, 0x0009, 0x0007, 0x116C, 0x3AB4, 0x19AF, 0x0004, 0x0002, // 0x0190 (400) pixels
    0x0000, 0x0000, 0x0041, 0x22AD, 0x555B, 0x451B, 0x024E, 0x0066, 0x0026, 0x198C, 0x114C, 0x0007, 0x0009, 0x008D, 0x1256, 0x22B7, // 0x01A0 (416) pixels
    0x2A72, 0x0005, 0x0002, 0x0000, 0x0000, 0x0000, 0x0020, 0x0043, 0x3478, 0x3D3C, 0x455B, 0x3455, 0x00A7, 0x0025, 0x0026, 0x0007, // 0x01B0 (432) pixels
    0x11B1, 0x22B8, 0x12BA, 0x22F9, 0x0047, 0x0002, 0x0021, 0x0020, 0x0000, 0x0000, 0x0021, 0x0022, 0x00C8, 0x4D1B, 0x2D3C, 0x2D5D, // 0x01C0 (448) pixels
    0x455D, 0x0AD3, 0x00EF, 0x1A97, 0x12BA, 0x0A9A, 0x1A98, 0x016F, 0x0023, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0022, // 0x01D0 (464) pixels
    0x0024, 0x0A4E, 0x3D5D, 0x1D1D, 0x253D, 0x3D5F, 0x0B1A, 0x0A9B, 0x029C, 0x12DB, 0x1A33, 0x0006, 0x0001, 0x0840, 0x0000, 0x0000, // 0x01E0 (480) pixels
    0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0024, 0x3436, 0x353C, 0x1D5D, 0x255F, 0x02FA, 0x0A9C, 0x029B, 0x1AD9, 0x0028, 0x0002, // 0x01F0 (496) pixels
    0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0045, 0x4D3A, 0x255D, 0x1D5F, 0x02FB, 0x0A9B, // 0x0200 (512) pixels
    0x1ADA, 0x00EE, 0x0004, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0023, 0x01AB, // 0x0210 (528) pixels
    0x3D5D, 0x253F, 0x031C, 0x12BA, 0x11D1, 0x0005, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, // 0x0220 (544) pixels
    0x0000, 0x0021, 0x0001, 0x0024, 0x1B94, 0x3D3E, 0x0AF9, 0x22B7, 0x0006, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0230 (560) pixels
    0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0021, 0x0002, 0x0064, 0x651A, 0x22F5, 0x00AB, 0x0002, 0x0000, 0x0000, 0x0000, // 0x0240 (576) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x0000, 0x0000, 0x0000, 0x0042, 0x0127, 0x222E, 0x0025, // 0x0250 (592) pixels
    0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0260 (608) pixels
};

const unsigned short btcesp[] PROGMEM = {
    0x0020, 0x0020, 0x0000, 0x0800, 0x1000, 0x2000, 0x8200, 0xCBE2, 0xECE7, 0xF507, 0xECC6, 0xF506, 0xC381, 0x79C0, 0x2000, 0x1000, // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0000, 0x0800, 0x1000, 0x6223, 0xDD6E, 0xE56C, 0xD4C9, 0x9AE1, 0x8A40, 0x8A20, 0xA301, // 0x0020 (32) pixels
    0xE50A, 0xE56C, 0xCD2C, 0x51C1, 0x0800, 0x0800, 0x0000, 0x0800, 0x0000, 0x0800, 0x1800, 0xABC7, 0xE58D, 0xBC49, 0x2880, 0x1000, // 0x0030 (48) pixels
    0x1800, 0x1800, 0x2000, 0x2000, 0x1800, 0x4100, 0xCCCA, 0xE58C, 0x8B44, 0x1000, 0x0800, 0x0000, 0x0800, 0x1000, 0xABC7, 0xED8C, // 0x0040 (64) pixels
    0x8A81, 0x2000, 0x1000, 0x28E0, 0xB4CD, 0x2000, 0xA3C7, 0x59C1, 0x1000, 0x1000, 0x2000, 0xA364, 0xE5AB, 0x8323, 0x1000, 0x0800, // 0x0050 (80) pixels
    0x1000, 0x51A0, 0xE56C, 0x9AE2, 0x2800, 0x3860, 0x3880, 0x61A0, 0xED8B, 0x3800, 0xD486, 0x92A0, 0x2000, 0x1800, 0x1000, 0x1800, // 0x0060 (96) pixels
    0xA3C5, 0xDD6C, 0x38E0, 0x1000, 0x1800, 0xCD2D, 0xD4EB, 0x2800, 0x1800, 0xAC6C, 0xE58D, 0xDD09, 0xE4E7, 0xED28, 0xED29, 0xE52A, // 0x0070 (112) pixels
    0xE54B, 0x8B24, 0x0800, 0x0800, 0x2000, 0xDD6D, 0xC48B, 0x2000, 0x5100, 0xDD6D, 0x59C2, 0x1000, 0x0800, 0x1000, 0x5100, 0xE52A, // 0x0080 (128) pixels
    0xE54A, 0x2800, 0x1800, 0x69E0, 0xED27, 0xED69, 0x2880, 0x0800, 0x1000, 0x72A5, 0xDD4D, 0x4060, 0x8A60, 0xE5AC, 0x1000, 0x0000, // 0x0090 (144) pixels
    0x0020, 0x0800, 0x5140, 0xE529, 0xDD4B, 0x2000, 0x2000, 0x3040, 0xED06, 0xF569, 0x2040, 0x0000, 0x0800, 0x2040, 0xE58D, 0x79A0, // 0x00A0 (160) pixels
    0xB360, 0xDD09, 0x1000, 0x0000, 0x0000, 0x0800, 0x5180, 0xDD29, 0xE528, 0x6140, 0x71A0, 0xCC46, 0xF508, 0x8200, 0x1000, 0x0000, // 0x00B0 (176) pixels
    0x0000, 0x1000, 0xE54C, 0x9AA0, 0xC3A0, 0xD4A8, 0x1000, 0x0000, 0x0000, 0x0800, 0x4940, 0xDD29, 0xDD08, 0xC446, 0xCC88, 0xE52A, // 0x00C0 (192) pixels
    0xDC66, 0x8200, 0x1000, 0x0000, 0x0000, 0x0800, 0xE54B, 0xA2E0, 0xB340, 0xDD2A, 0x1000, 0x0000, 0x0020, 0x0800, 0x5140, 0xE54A, // 0x00D0 (208) pixels
    0xDD4B, 0x2000, 0x1800, 0x2000, 0xECE7, 0xF529, 0x6A22, 0x0800, 0x0800, 0x1000, 0xED8B, 0x9A80, 0x8A40, 0xE56B, 0x2020, 0x0800, // 0x00E0 (224) pixels
    0x0000, 0x1000, 0x5940, 0xE508, 0xE54B, 0x2000, 0x1000, 0x1800, 0xCC03, 0xF507, 0x9B66, 0x1000, 0x0800, 0x38E0, 0xE56B, 0x71A0, // 0x00F0 (240) pixels
    0x4880, 0xE56C, 0x6A43, 0x1800, 0x1000, 0x2000, 0x8200, 0xED07, 0xE507, 0x3000, 0x3020, 0x71E0, 0xED27, 0xED28, 0x6A02, 0x1000, // 0x0100 (256) pixels
    0x1800, 0x8B46, 0xDDAE, 0x2800, 0x2000, 0xC4EC, 0xD54D, 0x2000, 0x1800, 0xBCAD, 0xE56C, 0xE509, 0xDD08, 0xE54A, 0xE52A, 0xE52A, // 0x0110 (272) pixels
    0xCC86, 0x7A60, 0x1800, 0x1800, 0x3040, 0xD56D, 0x9BE9, 0x1800, 0x0800, 0x2060, 0xE5CC, 0xBC67, 0x1800, 0x1800, 0x1000, 0x30A0, // 0x0120 (288) pixels
    0xE5CF, 0x2800, 0xCCAA, 0x7200, 0x1800, 0x1000, 0x1000, 0x1800, 0xD4E9, 0xE56B, 0x1000, 0x0000, 0x0000, 0x1000, 0x6A20, 0xE58B, // 0x0130 (304) pixels
    0xB46A, 0x1800, 0x1000, 0x2860, 0x8306, 0x2000, 0x7A21, 0x48E0, 0x1000, 0x1000, 0x1800, 0xC4CC, 0xE56C, 0x5960, 0x0800, 0x0000, // 0x0140 (320) pixels
    0x0000, 0x0800, 0x1000, 0x6A42, 0xE58D, 0xDD2B, 0x7A40, 0x2800, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x8281, 0xE54B, 0xE56D, // 0x0150 (336) pixels
    0x4980, 0x1000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0800, 0x1000, 0x3080, 0xC4A9, 0xE56C, 0xED8C, 0xCCC9, 0xABE6, 0xB3E8, 0xD50C, // 0x0160 (352) pixels
    0xDD4C, 0xEDCD, 0xBC27, 0x2820, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0800, 0x1000, 0x3880, 0x8261, // 0x0170 (368) pixels

};

void setup()
{

  Serial.begin(115200);
  setupPanel();
  WiFi.begin("RIGJAZZ", "Kashmiri786");

  clearMatrix();

  displayMatrix(0, 0, 1, matrix.Color333(7, 0, 4), "Connecting WiFi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");

    delay(1250);
  }

  // Oled Screen Startup 0.96-inch 128*64 dot matrix OLED
  matrix.fillScreen(matrix.Color333(0, 0, 0));
  clearMatrix();
  displayMatrix(0, 0, 1, matrix.Color333(0, 7, 0), "Connected");
  Serial.println("Connected");
  Serial.println(WiFi.localIP());
  delay(2000);
  Serial.println("DevID: "+(WiFi.macAddress()));
  getConfig(WiFi.macAddress());
}

void showCoin1Euro(String coin_name, double change24, double price)
{
  // Do nothing -- image doesn't change


 

  displayMatrix(0, 0, 1, matrix.Color333(7, 0, 4), coin_name);
  if (change24 > 0)
  {
    displayMatrix(1, 10, 1, matrix.Color333(0, 0, 7), (String)change24 + "%");
    // displayMatrix(33, 10, 1, matrix.Color333(7, 0, 7), (String)"€");
  }
  else
  {

    displayMatrix(1, 10, 1, matrix.Color333(7, 0, 0), (String)change24 + "%");
    // displayMatrix(33, 10, 1, matrix.Color333(7, 0, 7), (String)"€");
  }

if(bitcoin_usd<1)
    {
  char lon[9];
  dtostrf(price, 6, 7, lon); // I have tried several different set's of numbers here for width and precision
  Serial.print("exponention to String is: ");
  Serial.println(lon);
displayMatrix(9, 20, 1, matrix.Color333(7, 7, 7), (String)lon);
    }
else
{
displayMatrix(9, 20, 1, matrix.Color333(7, 7, 7), (String)price);
}
  
}

void getAPI(String selection)
{

  if ((WiFi.status() == WL_CONNECTED))

  {
    HTTPClient http;
    // coinAPI="https://api.coingecko.com/api/v3/simple/price?ids="+selectionArr[2]+"%2C"+selectionArr[3]+"&vs_currencies=eur%2Cgbp%2Cusd&include_24hr_change=true";
    coinAPI = "https://api.coingecko.com/api/v3/simple/price?ids=" + selection + "&vs_currencies=eur%2Cgbp%2Cusd&include_24hr_change=true";
    Serial.println(coinAPI);
    http.begin(coinAPI);
    int httpCode = http.GET();

    if (httpCode > 0)
    {
    }
    coinAPI = "";
    Serial.println("\nStatuscode: " + String(httpCode));
    delay(100);

    const size_t capacity = JSON_OBJECT_SIZE(2) + 2 * JSON_OBJECT_SIZE(6) + 150;
    DynamicJsonDocument doc(capacity);
    String payload = http.getString();
    Serial.println(payload);
    const char *json = payload.c_str();

    DeserializationError error = deserializeJson(doc, json);

    if (error)
    {
      Serial.print(F("deserializeJson() failed: "));
      Serial.println(error.f_str());
      return;
    }

    JsonObject bitcoin = doc[selection];


    bitcoin_eur = bitcoin["eur"];                       // 9473.3
    bitcoin_eur_24h_change = bitcoin["eur_24h_change"]; // 11.379516678954898
    bitcoin_gbp = bitcoin["gbp"];                       // 8642.89
    bitcoin_gbp_24h_change = bitcoin["gbp_24h_change"]; // 11.58637677393075
    bitcoin_usd = bitcoin["usd"];                       // 11140.6
    bitcoin_usd_24h_change = bitcoin["usd_24h_change"]; // 12.464050392648252
                                                        // Serial.println(selectionArr[3]);
  
    
    //      JsonObject ethereum = doc["ape"];
    //      ethereum_eur = ethereum["eur"];                       // 276.02
    //       ethereum_eur_24h_change = ethereum["eur_24h_change"]; // 3.5689620753981264
    //      ethereum_gbp = ethereum["gbp"];                       // 251.82
    //       ethereum_gbp_24h_change = ethereum["gbp_24h_change"]; // 3.7613159836416026
    //      ethereum_usd = ethereum["usd"];                       // 324.6
    //       ethereum_usd_24h_change = ethereum["usd_24h_change"]; // 4.577442219792744

    Serial.println("-------------------------------");

    Serial.print("BTC-EUR: ");
    Serial.println(bitcoin_eur);
    Serial.print("BTC-EUR 24hr %: ");
    Serial.println(bitcoin_eur_24h_change);

    Serial.print("BTC-GBP: ");
    Serial.println(bitcoin_gbp);
    Serial.print("BTC-GBP 24hr %: ");
    Serial.println(bitcoin_gbp_24h_change);

    Serial.print("BTC-USD: ");
    Serial.println(bitcoin_usd);
    Serial.print("BTC-USD 24hr %: ");
    Serial.println(bitcoin_usd_24h_change);
    Serial.println("-------------------------------");
    Serial.print("ETH-EUR: ");
    Serial.println(ethereum_eur);
    Serial.print("ETH-EUR 24hr %: ");
    Serial.println(ethereum_eur_24h_change);

    Serial.print("ETH-GBP: ");
    Serial.println(ethereum_gbp);
    Serial.print("ETH-GBP 24hr %: ");
    Serial.println(ethereum_gbp_24h_change);

    Serial.print("ETH-USD: ");
    Serial.println(ethereum_usd);
    Serial.print("ETH-USD 24hr %: ");
    Serial.println(ethereum_usd_24h_change);

    Serial.println("-------------------------------");
  }
}

void loop()
{
  if (millis() - prevMillisCoin > 10000)
  {
    for (int i = 2; i < 12; i++)
    {
      if (selectionArr[i] != "null")
      {
        getAPI(selectionArr[i]);
        clearMatrix();
        // matrix.drawRGBBitmap(43, 0, (const uint16_t *)btcesp, 20, 19);
        //   showCoin1Euro(selectionArr[i],bitcoin_eur_24h_change,bitcoin_eur);
        if(selectionArr[12+i].indexOf("usd")>-1)
        {
            displayMatrix(1, 20, 1, matrix.Color333(7, 0, 0), (String)"$");
              
  showCoin1Euro(selectionArr[i], bitcoin_eur_24h_change, bitcoin_eur);
        }
else
{
  


   matrix.drawRGBBitmap(1, 20, (const uint16_t *)euro, 6, 8);
        showCoin1Euro(selectionArr[i], bitcoin_usd_24h_change, bitcoin_usd);

}

      }
    }
    prevMillisCoin = millis();
  }

  if (millis() - prevMilliConfig > 40000)
  {
    getConfig(WiFi.macAddress());
    prevMilliConfig = millis();
  }

  /*
      clearMatrix();
      matrix.drawRGBBitmap(43, 0, (const uint16_t *)eth, 20, 31);
      showCoin1Euro("Etherum",ethereum_eur_24h_change,ethereum_eur);
       matrix.drawRGBBitmap(32, 9, (const uint16_t *)euro, 6, 8);
  delay(5000);

      clearMatrix();
      matrix.drawRGBBitmap(43, 0, (const uint16_t *)btcesp, 20, 19);
      showCoin1Euro("BitCoin",bitcoin_usd_24h_change,bitcoin_usd);
    displayMatrix(32, 9, 1, matrix.Color333(7, 0, 0), (String)"$");

  delay(5000);

      clearMatrix();
      matrix.drawRGBBitmap(43, 0, (const uint16_t *)eth, 20, 31);
      showCoin1Euro("Etherum",ethereum_usd_24h_change,ethereum_usd);
      displayMatrix(32, 9, 1, matrix.Color333(7, 0, 0), (String)"$");
      prevMillisCoin = millis();

    }
  */
  if (WiFi.status() != WL_CONNECTED)
  {
    WiFi.begin("RIGJAZZ", "Kashmiri786");
    Serial.print(".");

    delay(10000);
  }
}
